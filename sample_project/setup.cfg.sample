# This is a fully annotated sample setup.cfg file.  See setup.cfg for a
# condensed version.


[metadata]
# The globally unique name of your project--though it's common to use the name
# of the Python package in this project, this can be anything.  Just don't use
# a name that already exists in PyPI
name = sample_project

# The current version of your project
version = 1.0

# A brief summary of your project--this shows up in PyPI search listings
summary = A sample of how the stsci_python projects should be structured

# A longer description of your project.  Note that for any option, newlines can
# be added so long as they're prefixed with whitespace.  This description is
# shown on the PyPI page for your project.  The description may use
# reStructured Text formatting.
description = This is not a real package.  It just shows an example of how to
 get all kinds of files installed.

# Alternately, you may use the description-file option.  This reads your
# project's description from one or more text files (each file should be listed
# on a separate line).  This example takes the description from the README file
# and also appends the CHANGES file.  This only used if description is missing
# or empty.
# description-file =
#     README
#     CHANGELOG

# You may list any number of authors here
author = Mark Sienkiewicz, Erik M. Bray

# Usually best to just put help@stsci.edu here...
author-email = help@stsci.edu

home-page = http://www.stsci.edu/resources/software_hardware/pyraf/stsci_python

# A string indicating the license for this software; this is optional so long
# as the license is listed as a trove classifier (see below)
license = BSD

# Adding some valid trove classifiers is a good idea (and would be a better
# idea if more people actually used them to begin with).  A database of
# currently valid classifiers is at:
# http://pypi.python.org/pypi?%3Aaction=list_classifiers
# Here are some to start with that will apply to most projects:
classifier =
    Intended Audience :: Science/Research
    License :: OSI Approved :: BSD License
    Operating System :: OS Independent
    Programming Language :: Python
    # Add this if your project supports Python 3
    #Programming Language :: Python :: 3
    Topic :: Scientific/Engineering :: Astronomy
    Topic :: Software Development :: Libraries :: Python Modules


[files]
# This section contains information about your Python packages/modules and any
# other associated files (with the exception of extension modules which are in
# their own sections)

# The directory under which all Python packages can be found; if not specified
# this is assumed to be '.'--that is, all packages are at the root of the
# source tree.  All Python packages now must be included under the same root
packages_root = lib

# List all Python packages (including sub-packages) in this project.  Note that
# in the case 'stsci' is a namespace package, in which several projects may
# place their packages.  Although this is not the only project that uses the
# stsci namespace package, it still must list it as one of the packages it includes (in case it's the first 'stsci' package that's installed on the system).
# Each package should be on a separate line (note: I like to indent each line
# with four spaces like Python code, but any whitespace will)
packages =
    stsci
    stsci.sample_package
    stsci.sample_package.tests

# Modules that don't live in a package can also be installed (stand-alone
# modules must still be located under packages-root):
modules = sample_module

# List any scripts that should be installed to bin/.  Any file can be treated
# as a 'script', but I recommend keeping them under a separate scripts/
# directory where applicable.  I also recommend setting the svn:executable
# property on all scripts.
# In the future, distutils2/packaging will prefer scripts to be specified in
# the resources section, but we're not using that feature yet.
scripts = scripts/sample_package

# Non-Python files are not automatically installed even if they're in a Python
# package directory.  To make sure that files that must be included with a
# package are installed, use the package_data option.  Each package may have
# more than one glob pattern, with each pattern separated by a space).  For
# example:
#     stsci.sample_package = static/*.html static/*.css
package_data =
    stsci.sample_package.tests = *.dat

# None-Python files can also be included using the data_files option--this
# works the same as the data_files option in distutils.  Note that it does
# *not* support wildcard patterns by default; however, a setup_hook (see the
# [global] section) called stsci.distutils.hooks.glob_data_files is available
# to add wildcard functionality.
data_files =
    stsci/sample_package = a.txt b.txt


# TODO: Document this (though most of the documentation is already in
# stsci/sample_package/setup.py)
[global]
setup_hooks =
    stsci.distutils.hooks.use_packages_root
    stsci.sample_package.setup.hook


[build_ext]
pre-hook.sample-build-hook = stsci.sample_package.setup.build_ext_hook


# Each extension module is specified in its own section, with a section header
# of [extension=<extension_module_name>] where <extension_module_name> is the
# full name of the extension module, including the package it belongs to.  The
# exact syntax of this may be subject to change in the future...
[extension=stsci.sample_package.sscanf]
# List all source files that must be compiled for this extension module.
# Currently, all source files must be explicitly listed, though hopefully glob
# support will be added here.  Files may also be added to or removed from this
# list by hooks (see above). 
sources = src/sscanf.c

# All other options that are normally passed to distutils.extension.Extension,
# such as library_dirs and include_dirs can be specified here.  Macros can also
# be defined like so:
# macros =
#     NDEBUG
#     WIN32
#     LOG_LEVEL = info
