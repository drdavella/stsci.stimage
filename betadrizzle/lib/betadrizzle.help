
Extended Summary
----------------
MultiDrizzle automates the process of aligning images in an output frame, identifying cosmic-rays, removing distortion, and then combining the images while removing the identified cosmic-rays.  

This task requires numerous user-settable parameters to control the primary aspects of each of the processing steps.  

Parameters
----------
files : str or list of str
    The name or names of the input files to be processed which can be provided in any of several forms; namely:
    
      * filename of a single image
      * filename of an association (ASN) table
      * wild-card specification for files in directory
      * comma-separated list of filenames
      * '@file' filelist containing list of desired input filenames. The file list needs to be provided as an ASCII text file containing a list of filenames for all input images with one filename on each line of the file. If inverse variance maps (IVM maps) have also been created by the user and are to be used (by specifying 'IVM' to the parameter final_wht_type, then these are simply provided as a second column in the filelist, with each IVM filename listed on the same line as a second entry, after its corresponding exposure filename. 
          
   .. note:: If the user specifies 'IVM' for the 'final_wht_type' but does not provide the names of IVM files, MultiDrizzle will automatically generate the IVM files itself for each input exposure. 
    
editpars : bool
    Specifies whether or not to use the TEAL GUI to edit the full set of parameters described in the section on the full set of parameters.
    
configObj : object, optional
    User provided configObj to be used instead of the one generated by editing the parameters through the TEAL GUI.  These values will override any set in the default configObj. The full set of parameters and their definitions are provided in section on the full set of parameters.
    
wcsmap : object, optional
    User provided mapping class to be used in coordinate transformaions.  This class must include the following methods:

    * **apply_shift**: applies any corrections found in the image header to the WCS 
    * **forward**: performs the coordinate transformation from input to output WCS

input_dict : dict, optional
    This dictionary contains all the parameters and user-set values for only those parameters which should have non-default values. All possible parameters and their definitions are provided in the description of the full set of parameters. These are the parameters which normally get set through the TEAL GUI and provided as part of the 'configObj'. 

Input : str or list of str 
    The name or names of the input files to be processed, which can be provided in any of several forms as described by the **files** parameter. This parameter gets its value from the **files** parameter if one was provided there, otherwise, it can be set through the TEAL GUI. 

Output : str 
    The rootname for the output drizzled products. This step can result in the creation of several files, including:

      * copies of each input image as a FITS image, if workinplace=yes and/or input images are in GEIS format
      * mask files and coeffs files created by PyDrizzle for use by 'drizzle' 

    If an association file has been given as input, this name will be used instead of the product name specified in the ASN file. Similarly, if a single exposure is provided, this rootname will be used for the output product instead of relying on input rootname. If no value is provided when a filelist or wild-card specification is given as input, then a rootname of 'final' will be used. 


mdriztab : bool 
    Specifies whether or not to use an MDRIZTAB reference table to specify the remaining MultiDrizzle parameter settings. If 'True', the values in the table will override the settings for the remainder of the parameters.


refimage : str 
    Optional "reference image" that can be provided, in which case MultiDrizzle will create a final product with the same WCS. This reference image should be a simple FITS file (single-group, no multiple extensions), and should have been already drizzled so that all of its distortion has been removed, and its WCS is completely rectified.


runfile : str 
    This log file will contain the IRAF CL commands necessary for performing the final combination manually using the "drizzle" task directly.


workinplace : bool 
    This parameter specifies whether to perform all processing on the original, including skysubtraction and update of the DQ array. If set to 'True', then no copy of the input will be created for processing, and the original input will be modified directly by MultiDrizzle.


updatewcs : bool 
    This parameter specifies whether the WCS keywords are to be updated by running makewcs on the input data, or left alone. The update performed by makewcs not only recomputes the WCS based on the currently used IDCTAB, but also populates the header with the SIP coefficients. Also, for ACS/WFC images, the time-dependence correction will also be applied to the WCS and SIP keywords. This parameter should usually be set to 'yes', unless the WCS keywords have been carefully set by some other method, and need to be passed through to drizzle 'as is'.

wcskey : str
    This parameter will correspond to the *key* for the WCS being selected by the user. It allows the user to select which WCS should be used for processing the images when multiple WCS's have been updated in each input image header using the Paper I Multiple WCS FITS standard.      
    
    .. warning:: Use of this parameter should be done only when all input images have been updated using the Paper I FITS standard for specifying Multiple WCS's in each image header. This parameter assumes that the same WCS letter corresponds to WCS's which have been updated in a consistent manner. For example, all input images have been updated to be consistent with their distortion model in the WCS's with key of *A*. 

coeffs : bool 
    This parameter determines whether to use the coefficients stored in the each input image header or not.  If turned off, no distortion coefficients will be applied during the coordinate transformations.  


context : bool 
    This parameter specifies whether or not to create a context image during the final drizzle combination. The context image contains the information on what image(s) contributed to each pixel encoded as a bit-mask. More information on context images can be obtained from the ACS Data Handbook.


clean : bool 
    The temporary files created by MultiDrizzle can be automatically removed by setting this parameter to 'True'. The affected files would include the coefficients files and static mask files created by PyDrizzle, along with other intermediate files created by MultiDrizzle. It is often useful to retain the intermediate files and examine them when first learning how to run MultiDrizzle. But when running it routinely, or on a small disk drive, these files can be removed to save space.


group : int or str 
    A single FITS extension or group can be drizzled by setting this parameter. If an extension is provided, then only that chip will be drizzled onto the output frame. Either a FITS extension number or GEIS group number (such as '1'), or a FITS extension name (such as 'sci,1') may be specified.


ra : float
    Right ascension (in decimal degrees) of the center of the output image. If this is not specified, the code will calculate the center automatically based on the distribution of image dither positions.


dec : float 
    Declination (in decimal degrees) of the center of the output image. If this is not specified, the code will calculate the center automatically based on the distribution of image dither positions.


build : bool 
    MultiDrizzle will combine the separate 'drizzle' output files into a single multi-extension format FITS file when this parameter gets set to 'True'. This combined output file will contain a SCI (science), a WHT (weight), and a CTX (context) extension. If set to 'False', each extension would remain as a separate simple FITS file on its own.


shiftfile : str 
    Name of optional input file containing the shifts to be applied to the input images to improve their registration. These shifts will be added to those calculated automatically from the image headers. The file should be organized as follows\:

    ::
    
        # units: pixels 
        # frame: input
        # form: delta
        rootname  xshift   yshift   rotation   


staticfile : str
    Name of the optional input static bad-pixel mask. The input data are multiplied by the contents of this static mask file. 

static : bool 
    Create a static bad-pixel mask from the data?  This mask flags all pixels that deviate by more than 'static_sig' sigma below the image median, since these pixels usually result from oversubtraction of bad pixels in the dark image during calibration.


static_sig : float
    The number of sigma below the RMS to use as the clipping limit for creating the static mask, defaulted to 4.0 

skysub : bool   
    Turn on or off sky subtraction on the input data.

skywidth : float 
    Bin width, in sigma, used to sample the distribution of pixel flux values in order to compute the sky background statistics.

skystat : {'median', 'mode', 'mean'}
    Statistical method for determining the sky value from the image pixel values. 

skylower : float 
    Lower limit of usable pixel values for computing the sky. 
    This value should be specified in units of electrons.

skyupper : float 
    Upper limit of usable pixel values for computing the sky. 
    This value should be specified in units of electrons.

skyclip : int  
    Number of clipping iterations to use when computing the sky value.

skylsigma : float 
    Lower clipping limit, in sigma, used when computing the sky value.

skyusigma : float
    Upper clipping limit, in sigma, used when computing the sky value.

skyuser : str 
    Name of header keyword which records the sky value already subtracted from  the image by the user.

driz_separate : bool
    This parameter specifies whether or not to drizzle each input image onto separate output images. The separate output images will all have the same WCS as the final combined output frame. 
    These images are used to create the median image, needed for the cosmic ray rejection step further on.


driz_sep_outnx : int 
    Size of the X axis of the output images, in pixels, on which each input will be drizzled onto. 
    If no value is specified, it will use the smallest size that can accommodate the full dithered field.


driz_sep_outny : int 
    Size of the Y axis of the output images, in pixels, on which each input will be drizzled onto. 
    If no value is specified, it will use the smallest size that can accommodate the full dithered field.


driz_sep_kernel : {'square','point','gaussian','turbo','tophat','lanczos3'}
    For the initial separate drizzling operation only, this specifies the form of the kernel function used to distribute flux onto the separate output images. The options are currently:

      * **square**: original classic drizzling kernel
      * **point**: this kernel is a point so each input pixelcan only contribute to the single pixel which is closest to the output position. It is equivalent to the limit pixfrac -> 0 and is very fast.
      * **gaussian**: this kernel is a circular gaussian with FWHM equal to the value of pixfrac, measured in input pixels.
      * **turbo**: this is similar to kernel="square" but the box is always the same shape and size on the output grid and always aligned with the X and Y axes. This may result in a significant speed increase.
      * **tophat**: the kernel is a circular "top hat" shape of width pixfrac. It effects only output pixels within pixfrac/2 of the output position.
      * **lanczos3**: a Lanczos style kernel extending 3 pixels from the center. The Lanczos kernel is a damped, bounded form of the "sinc" interpolator and is very effective for resampling single images when scale=pixfrac=1. 
        It leads to less resolution loss than the other kernels, and also less correlated noise in outputs. 
        
        .. warning:: The ''lanczos3'' kernel is however much slower than the others. It should never be used for pixfrac != 1.0 and is not recommended for scale != 1.0. 

    The default for this step is **"turbo"** since it is much faster than **"square"**, and it is quite satisfactory for the purposes 
    of generating the median image. More information about the different kernels can be found in the help file for the drizzle task. 


driz_sep_wt_scl : float 
    Weighting factor for input image. If driz_sep_wt_scl=exptime then the scaling value will be set equal to the exposure time found in the image header. This is the default recommended behavior. It is also possible to give wt_scl=expsq for weighting by the square of exposure time, which is optimal for  read-noise dominated images.


driz_sep_scale : float 
    Linear size of the output pixels in arcseconds/pixel for each separate drizzled image (to be used in creating the median for cosmic ray rejection). The default value of INDEF specifies that the undistorted pixel scale for the first input image, as computed by PyDrizzle, will be used as the pixel scale for all the output images.


driz_sep_pixfrac : float 
    Fraction by which input pixels are "shrunk" before being drizzled onto the output image grid, given as a real number between 0 and 1. This specifies the size of the footprint, or "dropsize", of a pixel in units of the input pixel size. If pixfrac is set to less than 0.001, the kernel get reset to 'point' for more efficient processing. For the step of drizzling each input image onto a  separate output image, the default value of 1 is best in order to ensure that each output drizzled image is fully populated with pixels from the input image. For more information, see the help for the task 'drizzle'.


driz_sep_rot : float 
    Position Angle of output image's Y-axis relative to North. A value of 0.0 would orient the final output image with North up. The default of INDEF specifies that the images will not be rotated, but will instead be drizzled in the default orientation for the camera, with the x and y axes of the drizzled image corresponding approximately to the detector axes. This conserves disk space, since these single drizzled images are only used in the intermediate step of creating a median image.


driz_sep_fillval : int or INDEF
    Value to be assigned to output pixels that have zero weight or did not receive flux from any input pixels during drizzling. This parameter corresponds to the 'fillval' parameter of the 'drizzle' task. If the default of 'INDEF' is used and if the weight in both the input and output images for a given pixel are zero, then the output pixel will be set to the value it would have had if the input had a non-zero weight. Otherwise, if a numerical value is provided (eg. 0), then these pixels will be set to that value.


driz_sep_bits : int
    Integer sum of all the DQ bit values from the input image's DQ array that should be considered 'good' when building the weighting mask. This can also be used to reset pixels to good if they had been flagged as cosmic rays during a previous run of MultiDrizzle, by adding the value 4096 for ACS and WFPC2 data. Please see the section on Selecting the 'Bits' Parameter for a more detailed discussion.

median : bool
    The user can specify whether or not to create a median image with this parameter. This median image will be used as the comparison 'truth' image :in the cosmic ray rejection step.


median_newmasks : bool 
    The user can specify whether or not to create new mask files when creating the median image. These masks are generated from the weight files produced previously by the "driz_separate" step, and would contain all the bad pixel information. These pixels will be excluded when calculating the median. Generally this step should be set to "yes", unless it is desired to include bad pixels in generating the median.


combine_type : {'average', 'median', 'sum', 'minmed'}
    This parameter allows the user to choose which method is used to create the median image.  The 'average', 'median', and 'sum' options set the mode of operation for using 'numcombine' , a numpy method for median-combining arrays, to create the median image. The "minmed" option will produce an image that is generally the same as the median, except in cases where the median is significantly higher than the minimum good pixel value, in which case it will choose the minimum. The sigma thresholds for this decision are provided by the "combine_nsigma" parameter. However, as the "combine_nsigma" parameter does not adjust for the larger probability of a single "nsigma" event with a greater number of images, "minmed" will bias the comparison image low for a large number of images. "minmed" is highly recommended for three images, and good for four to six or more images. "minmed" should definitely be avoided for ten or more images. 

    A value of 'median' is the recommended method for a large number of images, and works equally well as minmed down to  about four images. However, the user should set the "combine_nhigh" parameter to one when using "median" with four images, and consider raising this parameter for larger numbers of images. As a median averages the two inner values when the number of values being considered is even, the user may want to keep the total number of images minus "combine_nhigh" odd when using "median". 


combine_nsigma : float
    Sigmas used for accepting minimum values instead of median values when using the 'minmed' combination method. If two values are specified, then the first value will be used in the initial choice between median and minimum, while the second value will be used in the "growing" step to reject additional pixels around those identified in the first step. If only one value is specified, then it is used in both steps.


combine_nlow : int 
    This parameter sets the number of low value pixels to reject automatically during image combination.

combine_nhigh : int 
    This parameter sets the number of high value pixels to reject automatically during image combination.

combine_lthresh : float 
    Sets the lower threshold for clipping input pixel values during image combination. This value gets passed directly to 'imcombine' for use in creating the median image. If None, no thresholds are used at all.


combine_hthresh : float
    Sets the upper threshold for clipping input pixel values during image combination. This value gets passed directly to 'imcombine' for use in creating the median image. If None, no thresholds are used at all.

combine_grow : int 
    Width in pixels for additional pixels to be rejected in an image with a rejected pixel from one of the rejection algorithms. This parameter is used to set the 'grow' parameter in 'imcombine' for use in creating the median image. 


blot : bool 
    Perform the blot operation on the median image. The output will be median smoothed images which match each input chips location, these are used in the cosmic ray rejection step.


blot_interp : {'nearest', 'linear', 'poly3', 'poly5', 'sinc'}
    Type of interpolation to use when blotting drizzled images back to their original WCS. Valid options are:

        * **nearest**: Nearest neighbor
        * **linear**: Bilinear interpolation in x and y
        * **poly3**: Third order interior polynomial in x and y
        * **poly5**: Fifth order interior polynomial in x and y 
        * **sinc**: Sinc interpolation; accurate but slow 

    The 'poly5' interpolation method has been chosen as the default because it is relatively fast and accurate. 
    
    If 'sinc' interpolation has been selected, then it will use the value of the parameter 'blot_sinscl' to specify the size of the sinc interpolation kernel. 


blot_sinscl : int
    Size of the sinc interpolation kernel in pixels. 


driz_cr : bool
    Perform cosmic-ray detection? If set to "yes", it will detect cosmic-rays and create cosmic-ray masks using the algorithms from 'deriv' and 'driz_cr'.

driz_cr_corr : bool 
    Create a cosmic-ray cleaned input image? The cosmic-ray cleaned _cor image will be generated directly from the input image, and a corresponding _crmask file will be written to document the pixels detected as affected by cosmic-rays.

driz_cr_snr : list of floats
    These values specify the signal-to-noise ratios for the 'driz_cr' task to use in detecting cosmic rays. See the help file for 'driz_cr' for further discussion of this parameter.

driz_cr_scale : float 
    Scaling factor applied to the derivative in 'driz_cr' when detecting cosmic-rays. See the help file for 'driz_cr' for further discussion of this parameter.

driz_cr_grow : int
    Radius (in pixels) around each detected cosmic-ray to use more stringent detection criteria for additional cosmic rays.

driz_cr_ctegrow : int
    Length (in pixels) of CTE tail to mask in drizzled output.


driz_combine : bool 
    This parameter specifies whether or not to drizzle each input image onto the final output image. This applies the generated cosmic-ray masks to the input images and create a final, cleaned, distortion-corrected product.

final_wht_type : {'EXP', 'ERR', 'IVM'}
    Specify the type of weighting image to apply with the bad pixel mask
for the final drizzle step.  The options are:

        * **EXP**: The default of 'EXP' indicates that the images will be weighted according to their exposure time, which is the standard behavior for drizzle. This weighting is a good approximation in the regime where the noise is dominated by photon counts from the sources, while contributions from sky background, read-noise and dark current are negligible. This option is provided as the default since it produces reliable weighting for all types of data, including older instruments (eg., WFPC2) where more sophisticated options may not be available.


        * **ERR**: Specifying 'ERR' is an alternative for ACS and STIS data, in which case the final drizzled images will be weighted according to the inverse variance of each pixel in the input exposure files, calculated from the error array data extension that is in each calibrated input exposure file. This array encapsulates all the noise sources in each exposure, including read-noise, dark current and sky background, as well as Poisson noise from the sources themselves, and this also includes a dependence upon exposure time. For WFPC2, the ERR array is not produced during calibration, therefore this option is not available. We advise extreme caution when selecting the "ERR" option, since the nature of this weighting scheme can introduce photometric discrepancies in sharp unresolved sources, although these effects are minimized for sources with gradual variations between pixels. The "EXP" weighting option does not suffer from these effects and is therefore the recommended option.


        * **IVM**: Finally, 'IVM' can be specified, in which case the user can either supply their own inverse-variance weighting map or let Multidrizzle generate one on-the-fly automatically during the final drizzle step. This may be necessary for specific purposes, for example to create a drizzled weight file for software such as Sextractor, which expects a weight image that contains all the background noise sources (sky level, read-noise, dark current, etc) but not the Poisson noise from the objects themselves. The user can create the inverse variance images and then specify their names using the 'input' parameter for MultiDrizzle to specify an '@file'. This would be a single ASCII file containing the list of input calibrated exposure filenames (one per line), with a second column containing the name of the IVM file corresponding to each calibrated exposure. Each IVM file must have the same file format as the input file, and if given as multi-extension FITS files (for example, ACS or STIS data) then the IVM extension must have the EXTNAME of 'IVM'. If no IVM files are specified on input, then Multidrizzle will rely on the flat-field reference file and computed dark value from the image header to automatically generate an IVM file specific to each exposure.


final_outnx : int 
    Size of the X axis of the output images, in pixels, on which each input will be drizzled onto. If no value is specified, it will use the smallest size that can accommodate the full dithered field.


final_outny : int 
    Size of the Y axis of the output images, in pixels, on which each input will be drizzled onto. If no value is specified, it will use the smallest size that can accommodate the full dithered field.


final_kernel : {'square','point','gaussian','turbo','tophat','lanczos3'}
    For the initial separate drizzling operation only, this specifies the form of the kernel function used to distribute flux onto the separate output images. The options are currently:

        * **square**: original classic drizzling kernel
        * **point**: this kernel is a point so each input pixelcan only contribute to the single pixel which is closest to the output position. It is equivalent to the limit pixfrac -> 0 and is very fast.
        * **gaussian**: this kernel is a circular gaussian with FWHM equal to the value of pixfrac, measured in input pixels.
        * **turbo**: this is similar to kernel="square" but the box is always the same shape and size on the output grid and always aligned with the X and Y axes. This may result in a significant speed increase.
        * **tophat**: the kernel is a circular "top hat" shape of width pixfrac. It effects only output pixels within pixfrac/2 of the output position.
        * **lanczos3**: a Lanczos style kernel extending 3 pixels from the center. The Lanczos kernel is a damped, bounded form of the "sinc" interpolator and is very effective for resampling single images when scale=pixfrac=1. It leads to less resolution loss than the other kernels, and also less correlated noise in outputs. 
        
    .. warning:: The ''lanczos3'' kernel is much slower than the other options. It should never be used for pixfrac != 1.0 and is not recommended for scale != 1.0. 

    The default for this step is "turbo" since it is much faster than "square", and it is quite satisfactory for the purposes 
    of generating the median image. More information about the different kernels can be found in the help file for the drizzle task. 


final_wt_scl : str
    Weighting factor for input image. If final_wt_scl=exptime then the scaling value will be set equal to the exposure time found in the image header. This is the default recommended behavior. It is also possible to give wt_scl=expsq for weighting by the square of exposure time, which is optimal for read-noise dominated images.


final_scale : float 
    Linear size of the output pixels in arcseconds/pixel for each separate drizzled image (to be used in creating the median for cosmic ray rejection). The default value of INDEF specifies that the undistorted pixel scale for the first input image will be used as the pixel scale for all the output images.


final_pixfrac : float
    Fraction by which input pixels are "shrunk" before being drizzled onto the output image grid, given as a real number between 0 and 1. This specifies the size of the footprint, or "dropsize", of a pixel in units of the input pixel size. If pixfrac is set to less than 0.001, the kernel get reset to 'point' for more efficient processing. For the step of drizzling each input image onto a separate output image, the default value of 1 is best in order to ensure that each output drizzled image is fully populated with pixels from the input image. For more information, see the help for the task 'drizzle'.


final_rot : float
    Position Angle of output image's Y-axis relative to North. A value of 0.0 would orient the final output image with North up. The default of INDEF specifies that the images will not be rotated, but will instead be drizzled in the default orientation for the camera, with the x and y axes of the drizzled image corresponding approximately to the detector axes. This conserves disk space, since these single drizzled images are only used in the intermediate step of creating a median image.


final_fillval : float or INDEF
    Value to be assigned to output pixels that have zero weight or did not receive flux from any input pixels during drizzling. This parameter corresponds to the 'fillval' parameter of the 'drizzle' task. If the default of 'INDEF' is used and if the weight in both the input and output images for a given pixel are zero, then the output pixel will be set to the value it would have had if the input had a non-zero weight. Otherwise, if a numerical value is provided (eg. 0), then these pixels will be set to that value.


final_bits : int
    Integer sum of all the DQ bit values from the input image's DQ array that should be considered 'good' when building the weighting mask. This can also be used to reset pixels to good if they had been flagged as cosmic rays during a previous run of MultiDrizzle, by adding the value 4096 for ACS and WFPC2 data. Please see the section on Selecting the 'Bits' Parameter for a more detailed discussion.

final_units : str
    This parameter determines the units of the final drizzle-combined image, and can either be 'counts' or 'cps'.  It is passed through to 'drizzle' in the final drizzle step.

gain : float 
    Value used to override instrument specific default gain values.  The value is assumed to be in units of electrons/count.  This parameter should not be populated if the ''gainkeyword'' parameter is in use.

gainkeyword : str
    Keyword used to specify a value to be used to override instrument specific default gain values.  The value is assumed to be in units of electrons/count. This parameter should not be populated if the ''gain'' parameter is in use.

rdnoise : float 
    Value used to override instrument specific default readnoise values.  The value is assumed to be in units of electrons.  This parameter should not be populated if the ''rnkeyword'' parameter is in use.

rnkeyword : str
    Keyword used to specify a value to be used to override instrument specific default readnoise values.  The value is assumed to be in units of electrons. This parameter should not be populated if the ''rdnoise'' parameter is in use.

exptime : float
    Value used to override default exposure time image header values.  The value is assumed to be in units of seconds.  This parameter should not be populated if the ''expkeyword'' parameter is in use.

expkeyword : str  
    Keyword used to specify a value to be used to override default exposure time image header values.  The value is assumed to be in units of seconds. This parameter should not be populated if the ''exptime'' parameter is in use.


See Also
--------
betadrizzle.drizzle: Apply the 'drizzle' algorithm to the images
betadrizzle.blot: Apply the 'blot' algorithm to drizzled images
betadrizzle.sky: Perform sky subtraction
betadrizzle.median: Create a median combined image from a set of drizzled images
betadrizzle.drizCR: Identify cosmic-rays by comparing blotted, median images to the original input images

Notes
------
Something to keep in mind is that the full MultiDrizzle interface will make backup copies of your original files and place them in the **OrIg_files/** directory of you current working directory.

EXAMPLES
--------
This task also has the ability to be called directly from Python for use in larger tasks. 

The primary Python interface to Multidrizzle has been developed as::

  def MultiDrizzle('*flt.fits', editpars=False, configObj=None, wcsmap=None, **input_dict)

A basic example of how to call this from within a Python task would be::

>>> import betadrizzle
>>> betadrizzle.MultiDrizzle('*flt.fits', editpars=False)
