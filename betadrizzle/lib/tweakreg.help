**Tweakreg** provides an automated interface for computing residual shifts
between input exposures being combined using MultiDrizzle. The offsets
computed by Tweakreg correspond to pointing differences after applying the WCS
information from the input image's headers.  Such errors would, for example,
be due to errors in guide-star positions when combining observations from
different observing visits or from slight offsets introduced upon re-acquiring
the guide stars in a slightly different position.

Examples
--------
This task can be run from either the TEAL GUI or from the Python command-line. These examples illustrate the syntax that can be used to run the task in a couple of common modes.

1. Run the task using the TEAL GUI under PyRAF:

    >>> import betadrizzle 
    >>> epar tweakreg

2. Find only the shifts(no rotation or scale) for a set of calibrated ACS (\_flt.fits) images using the built-in DAOFIND-like source finding algorithm with sources >10 sigma above the background without using the TEAL GUI:

  >>> from betadrizzle import tweakreg
  >>> tweakreg.TweakReg("*flt.fits", editpars=False, findmode="imagefind", \
      editipars=False, computesig=True, threshold=10.0, fitgeometry="shift")



Parameters
----------
files: str or list of str
    Input files which are being registered. For more details, see description
    of `input` parameter.
editpars: bool
    Specify whether or not to edit the parameters using the TEAL GUI
configObj: obj or None
    ConfigObj object containing user-specified parameters for running
    this task
input_dict: dict
    User-specified parameter values for only those parameters which they
    want to change

:Other Parameters from input_dict:
input: str or list of str
    Input files (passed in from *files* parameter) 
    This paramater can be provided in any of several forms:

     - filename of a single image
     - filename of an association (ASN)table
     - wild-card specification for files in directory (using \*, ? etc)
     - comma-separated list of filenames
     - '\@file' filelist containing list of desired input filenames
       (and optional inverse variance map filenames)

    The '\@file' filelist needs to be provided as an ASCII text file
    containing a list of filenames for all input images, with one
    filename on each line of the file. If inverse variance maps have
    also been created by the user and are to be used (by specifying
    'IVM' to the parameter 'final_wht_type' described further below),
    then these are simply provided as a second column in the filelist,
    with each IVM filename listed on the same line as a second entry,
    after its corresponding exposure filename.

output: str
    The name for the output shift file created by tweakshifts.  This
    shiftfile will be formatted for use as direct input to MultiDrizzle.
    [Default value: "shifts.txt"]

outwcs: str
    Filename to be given to the OUTPUT reference WCS file created
    by tweakshifts.  This reference WCS defines the WCS in which the
    shifts get measured, and will be used by MultiDrizzle to interpret
    the shifts.  This reference WCS file will be a FITS file that
    only contains the WCS keywords in a Primary header with no image
    data itself.  The values will be derived from the FIRST input image
    specified.  [Default value: "tweak_wcs.fits"]

refimage: str
    Filename of reference image. Sources derived from this image will be 
    used as the reference for matching with sources from all input images.

findmode:  {'imagefind', 'sextractor'}
    This parameter specifies what method should be used to extract source
    catalogs from each input image. 
    
    Selection of 'sextractor' only specifies that should the 'sextractor'
    executable be found on the user's system, it will be used., otherwise,
    'tweakshifts' will default to using the built-in function similar
    in operation to DAOFIND.

editspars: bool
    This parameter allows the user to specify whether or not they want to
    edit the parameters associated with the Sextractor PSET if 'findmode'
    was set to 'sextractor' and if Sextractor has been installed. This
    pset provides access to a majority of the most commonly used
    parameters for 'sextractor' for use when 'findmode = sextractor'.
    Each parameter has the same name as the 'sextractor' parameter and
    is a direct pass-through to the corresponding 'sextractor' parameter
    in the executable. These parameters are described in the help for
    `sextractorpars`_.

editipars: bool
    This parameter allows the user to specify whether or not they want to 
    edit the parameters for the built-in source finding algorithm if 'findmode'
    has been set to 'imagefind'. These parameters are described in the help for 
    `imagefind`_.

writecat: bool
    Specify whether or not to write out the source catalogs generated for
    each input image by the built-in source extraction algorithm.
    
clean: bool
    Specify whether or not to remove the temporary files created by
    'tweakshifts', including any catalog files generated for the shift
    determination. [Default value = False]

updatehdr: bool
    Specify whether or not to update the headers of each input image
    directly with the shifts that were determined. This will allow the
    input images to be combined by MultiDrizzle without having to provide
    the shiftfile as well. [Default value = False]

verbose: bool
    Specify whether or not to print extra messages during
    processing. [Default value = False]

catfile:str
    Name of file which contains list of input images and associated
    catalog files generated by the user.  Each line of this file will
    contain the name of an input image in the first column and the name
    of the catalog file for that image in the second column.

xcol: int
    Column number of X position from the user-generated catalog files
    specified in the catfile. [Default value = 1]

ycol: int
    Column number of Y position from the user-generated catalog files
    specified in the catfile.[Default value = 2]

fluxcol: int
    Column number for the flux values from the user-generated catalog
    files specified in the catfile.  These values will only be used if
    a flux limit has been specified by the user using the 'fluxmax' or
    'fluxmin' parameters.  [Default value = 3]

fluxmax: float
    Limiting flux value for selecting valid objects in the input image's
    catalog.  If specified, this flux will serve as the upper limit of a
    range for selecting objects to use in matching with objects identified
    in the reference image.  If INDEF, all objects with fluxes brighter
    than the minimum specified in 'fluxmin' will be used.  If both are
    set to INDEF, all objects will be used.

fluxmin: float
    Limiting flux value for selecting valid objects in the input image's
    catalog.  If specified, this flux will serve as the lower limit
    of a range for selecting objects to use in matching with objects
    identified in the reference image.  If INDEF, all objects fainter
    than the limit specified by 'fluxmax' will be used. If both are set
    to INDEF, all objects will be used.

fluxunits: {'counts', 'cps', 'mag'}
    This allows the task to correctly interpret the flux limits specified
    by 'fluxmax' and 'fluxmin' when sorting the object list for trimming
    of the fainter objects.

xyunits: {'pixels', 'degrees'}
    Specifies whether the positions in this catalog are pixel positions which
    still need to be transformed to the sky or whether the positions are 
    sky positions already. 
    
nbright: int
    Number of brightest objects to keep after sorting the full object list.
    If set to None, all objects will be used. [Default value = None]

refcat: str
    Name of external reference catalog file to use instead of the catalog
    extracted from one of the input images.

refxcol: int
    Column number of RA in the external catalog file specified by the
    refcat. [Default value = 1]

refycol: int
    Column number of Dec in the external catalog file specified by the
    refcat. [Default value = 2]

rfluxcol: int
    Column number of flux/magnitude values in the external catalog file
    specified by the refcat. [Default value = 3]

rfluxmax: float
    Limiting flux value for selecting valid objects in the external
    catalog.  If specified, this flux will serve as the upper limit of a
    range for selecting objects to use in matching with objects identified
    in the reference image.  If INDEF, all objects with fluxes brighter
    than the minimum specified in 'rfluxmin' will be used.  If both are
    set to INDEF, all objects will be used.

rfluxmin: float
    Limiting flux value for selecting valid objects in the external
    catalog.  If specified, this flux will serve as the lower limit
    of a range for selecting objects to use in matching with objects
    identified in the reference image.  If INDEF, all objects fainter
    than the limit specified by 'rfluxmax' will be used. If both are
    set to INDEF, all objects will be used.

rfluxunits: {'counts', 'cps', 'mag'}
    This allows the task to correctly interpret the flux limits specified
    by 'rfluxmax' and 'rfluxmin' when sorting the object list for trimming
    of the fainter objects.

refnbright: int
    Number of brightest objects to keep after sorting the full object
    list.  If set to None, all objects will be used. Used in conjunction
    with refcat. [Default value = None]

minobj: int
    Minimum number of identified objects from each input image to use
    in matching objects from other images.  [Default value = 15]

nmatch: int
    The maximum number of reference and input coordinates used by the
    'triangles' pattern matching algorithm in `xyxymatch`.  This parameter
    is passed directly to the IRAF task `xyxymatch`.  If either list
    contains more coordinates than nmatch, the lists are subsampled.
    The value of this parameter should be kept small as the computation
    and memory requirements for the 'triangles' algorithm depend on a high
    power of the lengths of the respective lists. [Default value = 30]
 
algorithm: {'tolerance', 'triangles'}
    The matching algorithm used in `xyxymatch`. [Default value = 'tolerance']
    
tolerance: float 
    The matching tolerance in pixels after applying an initial solution
    derived from the 'triangles' algorithm.  This parameter gets passed
    directly to `xyxymatch` for use in matching the object lists from each
    image with the reference image's object list. [Default value = 1.0]

separation: float 
    The  minimum  separation  for objects in the input and reference
    coordinate lists. Objects closer together than separation pixels
    are  removed from the input and reference coordinate lists prior
    to matching.  This parameter gets passed directly to `xyxymatch` for
    use in matching the object lists from each image with the reference
    image's object list. [Default value = 0.0]

xoffset: float
    Initial estimate for the offset in X between the images and the
    reference frame.  If None, no offset will be assumed in matching
    sources in 'xyxymatch'.  This offset will be used for all input
    images provided.

yoffset: float
    Initial estimate for the offset in Y between the images and the
    reference frame.  If None, no offset will be assumed in matching
    sources in 'xyxymatch'.  This offset will be used for all input
    images provided.
    

fitgeometry: {'shift', 'rscale', 'general'}
    The fitting geometry to be used for fitting the matched object lists.
    This parameter gets used in fitting the offsets, rotations and/or
    scale changes from the matched object lists.


Notes
-----

Tweakreg supports the use of calibrated, distorted images (such as
FLT images for ACS and WFC3, or _c0m.fits images for WFPC2) as input images.
All coordinates for sources derived from these images (either by this task
or as provided by the user directly) will be corrected for distortion using
the distortion model information specified in each image's header. This 
eliminates the need to run 'betadrizzle' on the input images prior to 
running `tweakreg`_.

.. note:: All calibrated input images must have been updated using 'updatewcs' from the STWCS package, or as run by 'betadrizzle', to include the full distortion model in the header. 

This task will use catalogs and catalog-matching based on the 'xyxymatch' 
algorithm to determine the offset between the input images.  The primary
mode of operation will be to extract a catalog of source positions from 
each input image using either a DAOFIND-like algorithm or SExtractor (if
the user has it installed).  Alternatively, the user can provide their
catalogs of source positions derived from **each input chip**.  

The reference frame will be defined either by:

    * the first input image (and associated catalog), 
    * a catalog derived from a reference image specified by the user, or 
    * a catalog of undistorted sky positions (RA/Dec) and fluxes 
        provided by the user 

The sources from each chip will be combined into a single catalog of 
undistorted positions for that observation when the distortion model
gets applied to the distorted input positions. 

The undistorted positions for each observation then get passed to 
'xyxymatch' for matching to objects from the reference catalog.

The source lists from each image generally will include cosmic-rays as
detected sources, sometimes significantly confusing object identification
between images. Long-exposure observations often have more cosmic-ray events
that source objects, so weeding them out in those cases would improve the
efficiency of identifying common sources between images.  One such method for
trimming potentially bad or confusing sources from each source list would be
to set a flux limit and only use sources above that limit.  The fluxes
reported in the default source object lists are given as 
magnitude values.  Thus, setting a limit based on the magnitudes
for the reference image as the *fluxmax* or *fluxmin* parameters and setting the
*ascend* parameter to *True* would allow the source lists to be trimmed
of all sources fainter than the provided limit.  This new trimmed source list
would then be used in matching sources between images and for the final
fitting for the shifts. 

A fit then gets performed on the matched set of positions between the
input and the reference to produce the 'shiftfile'.  If the user is
confident the solution will be correct, the header of each input image
can be updated directly with the fit derived for that image.  Otherwise,
the 'shiftfile' can be passed to the betadrizzle for aligning the images.

See Also
--------
betadrizzle

