#  Program: parseIVM.py
#  Author:  Christopher Hanley
#  History:
#   Version 0.1, 12/06/2004: Initial Creation -- CJH
__version__ = '0.1 (12/06/2004)'
__author__  = 'Christopher Hanley'

import pydrizzle
from pydrizzle import buildasn
from pydrizzle import fileutil

def parseIVM(inputlist):
    """
    FUNCTION: parseIVM
    PURPOSE : the parseIVM function is used to take the Python list generated by
              the parseinput function and split each entry on white space.  If there
              is more then one entry per line, we assume that the second entry is the
              name of an inverse variance map (IVM) file.  We separate the 
              entries into two lists, one for the input file names and a second for
              the IVM files.  We also make certain that if IVM files are provided, that
              there is one file for each input.  If not, a runtime exception is raised.
    INPUT   : inputlist - string object
    OUTPUT  : newinputlist - python list containing names of input files to be processed
              ivmlist - python list containg names of ivm files to be processed.              
    """

    # Define local variables
    newinputlist = []
    ivmlist = []
    ivmcount = 0

    errorstr =  "#######################################\n"
    errorstr += "#                                     #\n"
    errorstr += "# ERROR:                              #\n"
    errorstr += "#  There number of science inputs     #\n"
    errorstr += "#  does not equal the number of IVM   #\n"
    errorstr += "#  file inputs.  An IVM file must be  #\n"
    errorstr += "#  provided for every science input   #\n"
    errorstr += "#  file.  Please see the HELP file    #\n"
    errorstr += "#  for more information.              #\n"
    errorstr += "#                                     #\n"
    errorstr =  "#######################################\n"


    _files = buildasn._findFiles(inputlist)
    
    if (len(_files[0]) > 2):
        for f in _files:
            if f[2] != None:
                if fileutil.findFile(f[2]):
                    ivmcount += 1
                    ivmlist.append((f[0],f[2]))
                else:
                    raise ValueError, errorstr            

    if (ivmcount == 0 or ivmcount == len(_files)):             
        for f in _files: 
            newinputlist.append(f[0])
    else:
        raise ValueError, errorstr
        
    return newinputlist,ivmlist
    
